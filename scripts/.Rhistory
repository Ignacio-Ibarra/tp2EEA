mediana  <- planilla_cazatalentos[ ids_juegan3, median(aciertos1 + aciertos2 + aciertos3) ]
ids_juegan4  <- planilla_cazatalentos[ ids_juegan3 ][ (aciertos1 + aciertos2 + aciertos3) >= mediana, id ]
planilla_cazatalentos[ ids_juegan4,  tiros4 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado4  <- gimnasio_tirar( ids_juegan4, 70)
planilla_cazatalentos[ ids_juegan4,  aciertos4 := resultado4 ]  #registro en la planilla
#Ronda 5 -------------------------------------------------------
#A la mitad mejor la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan4, quantile(aciertos1 + aciertos2 + aciertos3 + aciertos4,0.5) ]
ids_juegan6  <- planilla_cazatalentos[ ids_juegan4 ][ (aciertos1 + aciertos2 + aciertos3 + aciertos4) >= mediana, id ]
#planilla_cazatalentos[ ids_juegan5,  tiros5 := 10 ]  #registro en la planilla que tiran 70 tiros
#resultado5  <- gimnasio_tirar( ids_juegan5, 10)
#planilla_cazatalentos[ ids_juegan5,  aciertos5 := resultado5 ]  #registro en la planilla
#Ronda 6 -------------------------------------------------------
#A la mitad mejor la hago tirar 200 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
#mediana  <- planilla_cazatalentos[ ids_juegan5, median(aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) ]
#ids_juegan6  <- planilla_cazatalentos[ ids_juegan5 ][ (aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) >= mediana, id ]
planilla_cazatalentos[ ids_juegan6,  tiros6 := 1 ]  #registro en la planilla que tiran 200 tiros
resultado6  <- gimnasio_tirar( ids_juegan6, 1)
planilla_cazatalentos[ ids_juegan6,  aciertos6 := resultado6 ]  #registro en la planilla
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos6) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
return( veredicto )
}
#------------------------------------------------------------------------------
#Aqui hago la Estimacion Montecarlo del porcentaje de aciertos que tiene la estrategia A
#c(671017, 273107, 827251, 967693, 247591,102191)
set.seed( 671017 )  #debe ir una sola vez, ANTES de los experimentos
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- Estrategia_B()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max( tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean( acierto) ]
tiros_total
tasa_eleccion_correcta
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#variables globales que usan las funciones gimnasio_xxxx
GLOBAL_jugadores  <- c()
GLOBAL_tiros_total  <- 0
#Crea el juego
#a cada jugador se le pone un numero de 1 a 100 en la espalda
#debajo de ese numero esta el indice_de_enceste  que NO puede ser visto por el cazatalentos
gimnasio_init  <- function()
{
GLOBAL_jugadores  <<-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <<- 0
}
#se le pasa un vector con los IDs de los jugadores y la cantidad de tiros a realizar
#devuelve en un vector cuantos aciertos tuvo cada jugador
gimnasio_tirar  <- function(  pids,  pcantidad )
{
GLOBAL_tiros_total  <<-  GLOBAL_tiros_total + length( pids )*pcantidad
res  <- mapply(  ftirar, GLOBAL_jugadores[pids], pcantidad )
return( res )
}
#El cazatalentos decide a que jugador llevarse
#devuelve la cantidad de tiros libres y si le acerto al verdadero_mejor o no
gimnasio_veredicto  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
Estrategia_B  <- function()
{
#Estrategia
#Se juegan varias rondas
#En cada ronda, los jugadores que participan, tiran 70 tiros
#De una ronda a la otra, solo pasan los que tuvieron igual o mayor aciertos a la mediana de aciertos de la ronda anterior
#Se elige el mejor jugador de la sexta ronda
gimnasio_init()
#Esta el la planilla del cazatalentos
#el id es el numero que tiene en la espalda cada jugador
planilla_cazatalentos  <- data.table( "id"= 1:100 )
#Ronda 1  ------------------------------------------------------
#tiran los 100 jugadores es decir 1:100   70  tiros libres cada uno
ids_juegan1  <- 1:100   #los jugadores que participan en la ronda,
planilla_cazatalentos[ ids_juegan1,  tiros1 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado1  <- gimnasio_tirar( ids_juegan1, 70)
planilla_cazatalentos[ ids_juegan1,  aciertos1 := resultado1 ]  #registro en la planilla
#Ronda 2 -------------------------------------------------------
#A la mitad mejor (50) la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan1, median(aciertos1) ]
ids_juegan2  <- planilla_cazatalentos[ ids_juegan1 ][ aciertos1 >= mediana, id ]
planilla_cazatalentos[ ids_juegan2,  tiros2 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado2  <- gimnasio_tirar( ids_juegan2, 70)
planilla_cazatalentos[ ids_juegan2,  aciertos2 := resultado2 ]  #registro en la planilla
#Ronda 3 -------------------------------------------------------
#A la mitad mejor (25) la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan2, median(aciertos1 + aciertos2) ]
ids_juegan3  <- planilla_cazatalentos[ ids_juegan2 ][ (aciertos1 + aciertos2) >= mediana, id ]
planilla_cazatalentos[ ids_juegan3,  tiros3 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado3  <- gimnasio_tirar( ids_juegan3, 70)
planilla_cazatalentos[ ids_juegan3,  aciertos3 := resultado3 ]  #registro en la planilla
#Ronda 4 -------------------------------------------------------
#A la mitad mejor (13?) la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan3, median(aciertos1 + aciertos2 + aciertos3) ]
ids_juegan4  <- planilla_cazatalentos[ ids_juegan3 ][ (aciertos1 + aciertos2 + aciertos3) >= mediana, id ]
planilla_cazatalentos[ ids_juegan4,  tiros4 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado4  <- gimnasio_tirar( ids_juegan4, 70)
planilla_cazatalentos[ ids_juegan4,  aciertos4 := resultado4 ]  #registro en la planilla
#Ronda 5 -------------------------------------------------------
#A la mitad mejor la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan4, median(aciertos1 + aciertos2 + aciertos3 + aciertos4) ]
ids_juegan5  <- planilla_cazatalentos[ ids_juegan4 ][ (aciertos1 + aciertos2 + aciertos3 + aciertos4) >= mediana, id ]
planilla_cazatalentos[ ids_juegan5,  tiros5 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado5  <- gimnasio_tirar( ids_juegan5, 70)
planilla_cazatalentos[ ids_juegan5,  aciertos5 := resultado5 ]  #registro en la planilla
#Ronda 6 -------------------------------------------------------
#A la mitad mejor la hago tirar 200 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan5, median(aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) ]
ids_juegan6  <- planilla_cazatalentos[ ids_juegan5 ][ (aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) >= mediana, id ]
planilla_cazatalentos[ ids_juegan6,  tiros6 := 1 ]  #registro en la planilla que tiran 200 tiros
resultado6  <- gimnasio_tirar( ids_juegan6, 1)
planilla_cazatalentos[ ids_juegan6,  aciertos6 := resultado6 ]  #registro en la planilla
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5 + aciertos6) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
return( veredicto )
}
#------------------------------------------------------------------------------
#Aqui hago la Estimacion Montecarlo del porcentaje de aciertos que tiene la estrategia A
#c(671017, 273107, 827251, 967693, 247591,102191)
set.seed( 671017 )  #debe ir una sola vez, ANTES de los experimentos
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- Estrategia_B()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max( tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean( acierto) ]
tiros_total
tasa_eleccion_correcta
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#variables globales que usan las funciones gimnasio_xxxx
GLOBAL_jugadores  <- c()
GLOBAL_tiros_total  <- 0
#Crea el juego
#a cada jugador se le pone un numero de 1 a 100 en la espalda
#debajo de ese numero esta el indice_de_enceste  que NO puede ser visto por el cazatalentos
gimnasio_init  <- function()
{
GLOBAL_jugadores  <<-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <<- 0
}
#se le pasa un vector con los IDs de los jugadores y la cantidad de tiros a realizar
#devuelve en un vector cuantos aciertos tuvo cada jugador
gimnasio_tirar  <- function(  pids,  pcantidad )
{
GLOBAL_tiros_total  <<-  GLOBAL_tiros_total + length( pids )*pcantidad
res  <- mapply(  ftirar, GLOBAL_jugadores[pids], pcantidad )
return( res )
}
#El cazatalentos decide a que jugador llevarse
#devuelve la cantidad de tiros libres y si le acerto al verdadero_mejor o no
gimnasio_veredicto  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
Estrategia_B  <- function()
{
#Estrategia
#Se juegan varias rondas
#En cada ronda, los jugadores que participan, tiran 70 tiros
#De una ronda a la otra, solo pasan los que tuvieron igual o mayor aciertos a la mediana de aciertos de la ronda anterior
#Se elige el mejor jugador de la sexta ronda
gimnasio_init()
#Esta el la planilla del cazatalentos
#el id es el numero que tiene en la espalda cada jugador
planilla_cazatalentos  <- data.table( "id"= 1:100 )
#Ronda 1  ------------------------------------------------------
#tiran los 100 jugadores es decir 1:100   70  tiros libres cada uno
ids_juegan1  <- 1:100   #los jugadores que participan en la ronda,
planilla_cazatalentos[ ids_juegan1,  tiros1 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado1  <- gimnasio_tirar( ids_juegan1, 70)
planilla_cazatalentos[ ids_juegan1,  aciertos1 := resultado1 ]  #registro en la planilla
#Ronda 2 -------------------------------------------------------
#A la mitad mejor (50) la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan1, median(aciertos1) ]
ids_juegan2  <- planilla_cazatalentos[ ids_juegan1 ][ aciertos1 >= mediana, id ]
planilla_cazatalentos[ ids_juegan2,  tiros2 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado2  <- gimnasio_tirar( ids_juegan2, 70)
planilla_cazatalentos[ ids_juegan2,  aciertos2 := resultado2 ]  #registro en la planilla
#Ronda 3 -------------------------------------------------------
#A la mitad mejor (25) la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan2, median(aciertos1 + aciertos2) ]
ids_juegan3  <- planilla_cazatalentos[ ids_juegan2 ][ (aciertos1 + aciertos2) >= mediana, id ]
planilla_cazatalentos[ ids_juegan3,  tiros3 := 70 ]  #registro en la planilla que tiran 70 tiros
resultado3  <- gimnasio_tirar( ids_juegan3, 70)
planilla_cazatalentos[ ids_juegan3,  aciertos3 := resultado3 ]  #registro en la planilla
#Ronda 4 -------------------------------------------------------
#A la mitad mejor (13?) la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan3, median(aciertos1 + aciertos2 + aciertos3) ]
ids_juegan4  <- planilla_cazatalentos[ ids_juegan3 ][ (aciertos1 + aciertos2 + aciertos3) >= mediana, id ]
planilla_cazatalentos[ ids_juegan4,  tiros4 := 50 ]  #registro en la planilla que tiran 70 tiros
resultado4  <- gimnasio_tirar( ids_juegan4, 50)
planilla_cazatalentos[ ids_juegan4,  aciertos4 := resultado4 ]  #registro en la planilla
#Ronda 5 -------------------------------------------------------
#A la mitad mejor la hago tirar 70 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan4, median(aciertos1 + aciertos2 + aciertos3 + aciertos4) ]
ids_juegan5  <- planilla_cazatalentos[ ids_juegan4 ][ (aciertos1 + aciertos2 + aciertos3 + aciertos4) >= mediana, id ]
planilla_cazatalentos[ ids_juegan5,  tiros5 := 50 ]  #registro en la planilla que tiran 70 tiros
resultado5  <- gimnasio_tirar( ids_juegan5, 50)
planilla_cazatalentos[ ids_juegan5,  aciertos5 := resultado5 ]  #registro en la planilla
#Ronda 6 -------------------------------------------------------
#A la mitad mejor la hago tirar 200 tiros cada uno
#La mediana siempre parte a un conjunto en dos partes de igual cantidad
mediana  <- planilla_cazatalentos[ ids_juegan5, median(aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) ]
ids_juegan6  <- planilla_cazatalentos[ ids_juegan5 ][ (aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) >= mediana, id ]
planilla_cazatalentos[ ids_juegan6,  tiros6 := 500 ]  #registro en la planilla que tiran 200 tiros
resultado6  <- gimnasio_tirar( ids_juegan6, 500)
planilla_cazatalentos[ ids_juegan6,  aciertos6 := resultado6 ]  #registro en la planilla
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos1 + aciertos2 + aciertos3 + aciertos4 + aciertos5 + aciertos6) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
return( veredicto )
}
#------------------------------------------------------------------------------
#Aqui hago la Estimacion Montecarlo del porcentaje de aciertos que tiene la estrategia A
#c(671017, 273107, 827251, 967693, 247591,102191)
set.seed( 671017 )  #debe ir una sola vez, ANTES de los experimentos
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- Estrategia_B()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max( tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean( acierto) ]
tiros_total
tasa_eleccion_correcta
#Intento de Solucion del desafio  15k
#que NO logra solucionarlo, una que falta una idea fundamental, una chispa, un Momento Eureka
#pero crea estructura sobre la cual trabajar
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
ftirar  <- function( prob, qty )
{
return(  sum( runif(qty) < prob ) )
}
#variables globales que usan las funciones gimnasio_xxxx
GLOBAL_jugadores  <- c()
GLOBAL_tiros_total  <- 0
#Crea el juego
#a cada jugador se le pone un numero de 1 a 100 en la espalda
#debajo de ese numero esta el indice_de_enceste  que NO puede ser visto por el cazatalentos
gimnasio_init  <- function()
{
GLOBAL_jugadores  <<-  sample( c( (501:599 ) / 1000 , 0.7 ) )
GLOBAL_tiros_total  <<- 0
}
#se le pasa un vector con los IDs de los jugadores y la cantidad de tiros a realizar
#devuelve en un vector cuantos aciertos tuvo cada jugador
gimnasio_tirar  <- function(  pids,  pcantidad )
{
GLOBAL_tiros_total  <<-  GLOBAL_tiros_total + length( pids )*pcantidad
res  <- mapply(  ftirar, GLOBAL_jugadores[pids], pcantidad )
return( res )
}
#El cazatalentos decide a que jugador llevarse
#devuelve la cantidad de tiros libres y si le acerto al verdadero_mejor o no
gimnasio_veredicto  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Estrategia
#En la primer ronda se hace tirar 90 tiros libres a cada uno de los 100 jugadores ( se gastan 90000 tiros )
#Se eligen a la mejor mitad  ( se descarta a la peor mitad )
#En la segunda ronda, a la mejor mitad de la anterior ronda se los hace tirar 400 tiros a cada uno
#Se elige el mejor jugador de la segunda ronda
set.seed( 102191 )
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 )
#Ronda 1  ------------------------------------------------------
#tiran los 100 jugadores es decir 1:100  90 tiros libres cada uno
ids_juegan1  <- 1:100   #los jugadores que participan en la ronda,
planilla_cazatalentos[ ids_juegan1,  tiros1 := 90 ]  #registro en la planilla que tiran 90 tiros
#Hago que tiren
resultado1  <- gimnasio_tirar( ids_juegan1, 90)
planilla_cazatalentos[ ids_juegan1,  aciertos1 := resultado1 ]  #registro en la planilla
#Ronda 2 -------------------------------------------------------
#los mejores 40 jugadores tiran 400 tiros cada uno
mediana  <- planilla_cazatalentos[ ids_juegan1, median(aciertos1) ]
ids_juegan2  <- planilla_cazatalentos[ ids_juegan1 ][aciertos1 >= mediana, id ]
planilla_cazatalentos[ ids_juegan2,  tiros2 := 400 ]  #registro en la planilla que tiran 400 tiros
resultado2  <- gimnasio_tirar( ids_juegan2, 400)
planilla_cazatalentos[ ids_juegan2,  aciertos2 := resultado2 ]  #registro en la planilla
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos2) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
veredicto
#El veredicto da que la estrategia seguida por el cazatalentos fue exitosa para este caso
#Le acerto al verdadero_mejor
#En el siguiente script veremos de hacer una Estimacion Montecarlo
#De 10000 veces que el entrenador sigue esta estrategia, cuantas realmente le acierta
sum(ids_juegan1)
len(ids_juegan1)
length(ids_juegan1)
length(ids_juegan2)
90*100 + 400*50
#Intento de Solucion del desafio  15k
#que NO logra solucionarlo, una que falta una idea fundamental, una chispa, un Momento Eureka
#pero crea estructura sobre la cual trabajar
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
ftirar  <- function( prob, qty )
{
return(  sum( runif(qty) < prob ) )
}
#variables globales que usan las funciones gimnasio_xxxx
GLOBAL_jugadores  <- c()
GLOBAL_tiros_total  <- 0
#Crea el juego
#a cada jugador se le pone un numero de 1 a 100 en la espalda
#debajo de ese numero esta el indice_de_enceste  que NO puede ser visto por el cazatalentos
gimnasio_init  <- function()
{
GLOBAL_jugadores  <<-  sample( c( (501:599 ) / 1000 , 0.7 ) )
GLOBAL_tiros_total  <<- 0
}
#se le pasa un vector con los IDs de los jugadores y la cantidad de tiros a realizar
#devuelve en un vector cuantos aciertos tuvo cada jugador
gimnasio_tirar  <- function(  pids,  pcantidad )
{
GLOBAL_tiros_total  <<-  GLOBAL_tiros_total + length( pids )*pcantidad
res  <- mapply(  ftirar, GLOBAL_jugadores[pids], pcantidad )
return( res )
}
#El cazatalentos decide a que jugador llevarse
#devuelve la cantidad de tiros libres y si le acerto al verdadero_mejor o no
gimnasio_veredicto  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Estrategia
#En la primer ronda se hace tirar 90 tiros libres a cada uno de los 100 jugadores ( se gastan 90000 tiros )
#Se eligen a la mejor mitad  ( se descarta a la peor mitad )
#En la segunda ronda, a la mejor mitad de la anterior ronda se los hace tirar 400 tiros a cada uno
#Se elige el mejor jugador de la segunda ronda
set.seed( 102191 )
#inicializo el juego
gimnasio_init()
#Esta el la planilla del cazatalentos
planilla_cazatalentos  <- data.table( "id" = 1:100 )
#Ronda 1  ------------------------------------------------------
#tiran los 100 jugadores es decir 1:100  90 tiros libres cada uno
ids_juegan1  <- 1:100   #los jugadores que participan en la ronda,
planilla_cazatalentos[ ids_juegan1,  tiros1 := 90 ]  #registro en la planilla que tiran 90 tiros
#Hago que tiren
resultado1  <- gimnasio_tirar( ids_juegan1, 90)
planilla_cazatalentos[ ids_juegan1,  aciertos1 := resultado1 ]  #registro en la planilla
#Ronda 2 -------------------------------------------------------
#los mejores 40 jugadores tiran 400 tiros cada uno
mediana  <- planilla_cazatalentos[ ids_juegan1, median(aciertos1) ]
ids_juegan2  <- planilla_cazatalentos[ ids_juegan1 ][aciertos1 >= mediana, id ]
planilla_cazatalentos[ ids_juegan2,  tiros2 := 400 ]  #registro en la planilla que tiran 400 tiros
resultado2  <- gimnasio_tirar( ids_juegan2, 400)
planilla_cazatalentos[ ids_juegan2,  aciertos2 := resultado2 ]  #registro en la planilla
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda2
pos_mejor <-  planilla_cazatalentos[ , which.max(aciertos2) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
veredicto
#El veredicto da que la estrategia seguida por el cazatalentos fue exitosa para este caso
#Le acerto al verdadero_mejor
#En el siguiente script veremos de hacer una Estimacion Montecarlo
#De 10000 veces que el entrenador sigue esta estrategia, cuantas realmente le acierta
length(ids_juegan1)
length(ids_juegan2)
70*(100+50+25) + (415 - 210) * 13
90 * 100 + 70 * 50
25 * (415 - 160)
100/2/2
25/2
12.5/2
library(smoof)
library(ggplot2)
fn = makeSingleObjectiveFunction(
name = "Sphere Function",
fn = function(x) sum(x^2),
par.set = makeNumericParamSet("x", len = 1L, lower = -5L, upper = 5L),
global.opt.params = list(x = 0)
)
print(fn)
print(autoplot(fn))
hs  <- makeParamSet(
makeNumericParam("cp"       , lower=  -1.0, upper=    0.1),
makeNumericParam("minsplit" , lower=   1,   upper= 5000 ),
makeNumericParam("minbucket", lower=   1,   upper= 1000 ),
makeIntegerParam("maxdepth" , lower=   3L,  upper=   20L),  #la letra L al final significa ENTERO
forbidden = quote( minbucket > 0.5*minsplit ) )
fn
setwd("C://Users//tiama//OneDrive//Documentos//R//EEA//Trabajo Práctico 2//scripts")
rm( list=ls() )
gc()
require(data.table)
require(ggplot2)
require(rpart)
require(rpart.plot)
require(gridExtra)
require(parttree)
df <- fread("./datasets/encuesta_salud_train.csv")
# obtengo una muestra
N = 100
set.seed(123)
idx <- sample(1:nrow(df), N)
samp.df <- df[idx, ]
min.x1 <- min(samp.df$altura)
max.x1 <- max(samp.df$altura)
# Modelo Lineal Simple: Peso  ~ Altura
lm.simple <- lm("peso ~ altura", data=samp.df)
coefs <- lm.simple$coefficients
g1 <- ggplot(samp.df, aes(altura, peso))+
geom_point()+
geom_abline(intercept = coefs[1], slope = coefs[2])
arbol <- rpart(formula = "peso ~ altura",
data = samp.df,
method = "anova",
)
min.x1 <- min(samp.df$altura)
max.x1 <- max(samp.df$altura)
x1 <- c(min.x1,161,161,165,165,168,168,173,173,179,179)
x2 <- c(161,161,165,165,168,168,173,173,179,179,max.x1)
y1 <- c(52,52,64,64,53,53,68,68,63,63,75)
y2 <- c(52,64,64,53,53,68,68,63,63,75,75)
partitions <- data.frame(x1, x2, y1, y2)
g2 <- ggplot(samp.df, aes(altura, peso))+
geom_point()+
geom_step()
#geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = partitions)
grid.arrange(g1,g2)
g2 <- ggplot(samp.df, aes(x = altura))+
geom_point(aes(y = peso))+
geom_step(y = peso)
g2 <- ggplot(samp.df, aes(x = altura))+
geom_point(aes(y = peso))+
geom_step(aes(y = peso))
#geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = partitions)
grid.arrange(g1,g2)
peso_pred <- predict(arbol,samp.df)
g2 <- ggplot(samp.df, aes(x = altura))+
geom_point(aes(y = peso))+
geom_step(y = peso_pred)
#geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = partitions)
grid.arrange(g1,g2)
augment(arbol,samp.df)
require(tidymodels)
augment(arbol,samp.df)
